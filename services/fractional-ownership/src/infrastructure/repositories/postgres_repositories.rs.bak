// Implementaciones de repositorios con PostgreSQL
use crate::domain::aggregates::FractionalOwnershipAggregate;
use crate::domain::entities::{FractionalSong, ShareOwnership, ShareTransaction};
use crate::domain::repositories::{
    FractionalOwnershipRepository, ShareOwnershipRepository, ShareTransactionRepository,
    FractionalOwnershipAnalyticsRepository, UserPortfolioSummary, TrendingSong, 
    GenreMarketStats, TopShareholder, SongInvestmentSummary
};
use crate::domain::errors::FractionalOwnershipError;
use crate::domain::value_objects::{OwnershipPercentage, SharePrice, RevenueAmount};
use crate::infrastructure::database::connection::DatabaseConnection;
use async_trait::async_trait;
use sqlx::{PgPool, Row};
use uuid::Uuid;
use std::collections::HashMap;
use chrono::{DateTime, Utc};
use rust_decimal::Decimal;

/// Helper function to convert Decimal to f64 safely
fn decimal_to_f64(decimal: Decimal) -> Result<f64, FractionalOwnershipError> {
    decimal.try_into()
        .map_err(|_| FractionalOwnershipError::InfrastructureError("Error converting decimal to f64".to_string()))
}

/// Implementaci贸n PostgreSQL del FractionalOwnershipRepository
pub struct PostgresFractionalOwnershipRepository {
    db_connection: DatabaseConnection,
}

impl PostgresFractionalOwnershipRepository {
    pub fn new(db_connection: DatabaseConnection) -> Self {
        Self { db_connection }
    }

    /// Helper para construir aggregate desde rows de la DB
    async fn build_aggregate_from_song_id(&self, song_id: Uuid) -> Result<Option<FractionalOwnershipAggregate>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        // Obtener datos de la canci贸n fraccionada
        let song_row = sqlx::query!(
            "SELECT id, song_id, artist_id, title, total_shares, artist_reserved_shares, 
             fan_available_shares, artist_revenue_percentage, available_shares, 
             current_price_per_share, created_at, updated_at
             FROM fractional_songs WHERE id = $1",
            song_id
        )
        .fetch_optional(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo song: {}", e)))?;

        let song_row = match song_row {
            Some(row) => row,
            None => return Ok(None),
        };

        // Crear la entidad FractionalSong - convertir DECIMAL a f64
        let price_value: f64 = song_row.current_price_per_share.try_into()
            .map_err(|_| FractionalOwnershipError::InfrastructureError("Error convirtiendo precio".to_string()))?;
        let price = SharePrice::new(price_value)
            .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?;

        let artist_revenue_pct: f64 = song_row.artist_revenue_percentage.try_into()
            .map_err(|_| FractionalOwnershipError::InfrastructureError("Error convirtiendo revenue percentage".to_string()))?;

        let song = FractionalSong::new_with_artist_control(
            song_row.id,
            song_row.song_id,
            song_row.artist_id,
            song_row.title,
            song_row.total_shares as u32,
            song_row.artist_reserved_shares as u32,
            artist_revenue_pct,
            price,
        )?;

        // Obtener todas las ownerships
        let ownership_rows = sqlx::query!(
            "SELECT user_id, shares_owned, purchase_price, total_earnings, purchase_date
             FROM share_ownerships WHERE fractional_song_id = $1",
            song_id
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo ownerships: {}", e)))?;

        let mut ownerships = HashMap::new();
        for row in ownership_rows {
            let purchase_price_value: f64 = row.purchase_price.try_into()
                .map_err(|_| FractionalOwnershipError::InfrastructureError("Error convirtiendo purchase price".to_string()))?;
            
            let ownership = ShareOwnership::new(
                row.user_id,
                song_id,
                row.shares_owned as u32,
                song_row.total_shares as u32,
                SharePrice::new(purchase_price_value)
                    .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
            )?;
            ownerships.insert(row.user_id, ownership);
        }

        // Crear el agregado
        let aggregate = FractionalOwnershipAggregate::new(song, ownerships)?;
        Ok(Some(aggregate))
    }
}

#[async_trait]
impl FractionalOwnershipRepository for PostgresFractionalOwnershipRepository {
    async fn get_by_id(&self, song_id: Uuid) -> Result<Option<FractionalOwnershipAggregate>, FractionalOwnershipError> {
        self.build_aggregate_from_song_id(song_id).await
    }

    async fn load_aggregate(&self, song_id: &Uuid) -> Result<Option<FractionalOwnershipAggregate>, FractionalOwnershipError> {
        self.build_aggregate_from_song_id(*song_id).await
    }

    async fn save_aggregate(&self, aggregate: &FractionalOwnershipAggregate) -> Result<(), FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        let mut tx = pool.begin().await
            .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error iniciando transacci贸n: {}", e)))?;

        let song = aggregate.fractional_song();
        
        // Upsert fractional song
        sqlx::query!(
            "INSERT INTO fractional_songs 
             (id, song_id, artist_id, title, total_shares, artist_reserved_shares, 
              fan_available_shares, artist_revenue_percentage, available_shares, 
              current_price_per_share, created_at, updated_at)
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
             ON CONFLICT (id) DO UPDATE SET
             available_shares = $9, current_price_per_share = $10, updated_at = $12",
            song.id(),
            song.song_id(),
            song.artist_id(),
            song.title(),
            song.total_shares() as i32,
            song.artist_reserved_shares() as i32,
            song.fan_available_shares() as i32,
            song.artist_revenue_percentage(),
            song.available_shares() as i32,
            song.current_price_per_share().value(),
            song.created_at(),
            song.updated_at()
        )
        .execute(&mut *tx)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error guardando song: {}", e)))?;

        // Save ownerships
        for ownership in aggregate.ownerships().values() {
            sqlx::query!(
                "INSERT INTO share_ownerships 
                 (id, user_id, fractional_song_id, shares_owned, purchase_price, 
                  total_earnings, purchase_date, last_earning_date)
                 VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                 ON CONFLICT (id) DO UPDATE SET
                 shares_owned = $4, total_earnings = $6, last_earning_date = $8",
                ownership.id(),
                ownership.user_id(),
                ownership.fractional_song_id(),
                ownership.shares_owned() as i32,
                ownership.purchase_price().value(),
                ownership.total_earnings().value(),
                ownership.purchase_date(),
                ownership.last_earning_date()
            )
            .execute(&mut *tx)
            .await
            .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error guardando ownership: {}", e)))?;
        }

        tx.commit().await
            .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error confirmando transacci贸n: {}", e)))?;

        Ok(())
    }

    async fn get_user_ownerships(&self, user_id: &Uuid) -> Result<Vec<ShareOwnership>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let rows = sqlx::query!(
            "SELECT so.user_id, so.fractional_song_id, so.shares_owned, so.purchase_price, 
             so.total_earnings, so.purchase_date, fs.total_shares
             FROM share_ownerships so
             JOIN fractional_songs fs ON so.fractional_song_id = fs.id
             WHERE so.user_id = $1",
            user_id
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo ownerships: {}", e)))?;

        let mut ownerships = Vec::new();
        for row in rows {
            let ownership = ShareOwnership::new(
                row.user_id,
                row.fractional_song_id,
                row.shares_owned as u32,
                row.total_shares as u32,
                SharePrice::new(row.purchase_price as f64)
                    .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
            )?;
            ownerships.push(ownership);
        }

        Ok(ownerships)
    }

    async fn get_user_revenue_for_song(&self, user_id: &Uuid, song_id: &Uuid) -> Result<Option<RevenueAmount>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let row = sqlx::query!(
            "SELECT total_earnings FROM share_ownerships WHERE user_id = $1 AND fractional_song_id = $2",
            user_id, song_id
        )
        .fetch_optional(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo revenue: {}", e)))?;

        match row {
            Some(row) => {
                let revenue = RevenueAmount::new(row.total_earnings as f64)
                    .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid revenue: {}", e)))?;
                Ok(Some(revenue))
            }
            None => Ok(None),
        }
    }

    async fn save(&self, aggregate: &FractionalOwnershipAggregate) -> Result<(), FractionalOwnershipError> {
        self.save_aggregate(aggregate).await
    }

    async fn delete(&self, song_id: Uuid) -> Result<(), FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        let mut tx = pool.begin().await
            .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error comenzando transacci贸n: {}", e)))?;

        // Eliminar ownerships primero (FK constraint)
        sqlx::query!("DELETE FROM share_ownerships WHERE fractional_song_id = $1", song_id)
            .execute(&mut *tx)
            .await
            .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error eliminando ownerships: {}", e)))?;

        // Eliminar song
        sqlx::query!("DELETE FROM fractional_songs WHERE id = $1", song_id)
            .execute(&mut *tx)
            .await
            .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error eliminando song: {}", e)))?;

        tx.commit().await
            .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error confirmando transacci贸n: {}", e)))?;

        Ok(())
    }

    async fn find_by_artist_id(&self, artist_id: Uuid) -> Result<Vec<FractionalOwnershipAggregate>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let song_rows = sqlx::query!(
            "SELECT id FROM fractional_songs WHERE artist_id = $1",
            artist_id
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error buscando por artist: {}", e)))?;

        let mut aggregates = Vec::new();
        for row in song_rows {
            if let Some(aggregate) = self.build_aggregate_from_song_id(row.id).await? {
                aggregates.push(aggregate);
            }
        }

        Ok(aggregates)
    }

    async fn get_all_paginated(&self, page: u32, size: u32) -> Result<Vec<FractionalOwnershipAggregate>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        let offset = (page.saturating_sub(1)) * size;
        
        let song_rows = sqlx::query!(
            "SELECT id FROM fractional_songs ORDER BY created_at DESC LIMIT $1 OFFSET $2",
            size as i64, offset as i64
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo paginado: {}", e)))?;

        let mut aggregates = Vec::new();
        for row in song_rows {
            if let Some(aggregate) = self.build_aggregate_from_song_id(row.id).await? {
                aggregates.push(aggregate);
            }
        }

        Ok(aggregates)
    }
}

/// Implementaci贸n PostgreSQL para ShareOwnershipRepository
pub struct PostgresShareOwnershipRepository {
    db_connection: DatabaseConnection,
}

impl PostgresShareOwnershipRepository {
    pub fn new(db_connection: DatabaseConnection) -> Self {
        Self { db_connection }
    }
}

#[async_trait]
impl ShareOwnershipRepository for PostgresShareOwnershipRepository {
    async fn get_by_user_and_song(&self, user_id: Uuid, song_id: Uuid) -> Result<Option<ShareOwnership>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let row = sqlx::query!(
            "SELECT so.user_id, so.fractional_song_id, so.shares_owned, so.purchase_price, 
             so.total_earnings, so.purchase_date, fs.total_shares
             FROM share_ownerships so
             JOIN fractional_songs fs ON so.fractional_song_id = fs.id
             WHERE so.user_id = $1 AND so.fractional_song_id = $2",
            user_id, song_id
        )
        .fetch_optional(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo ownership: {}", e)))?;

        match row {
            Some(row) => {
                let ownership = ShareOwnership::new(
                    row.user_id,
                    row.fractional_song_id,
                    row.shares_owned as u32,
                    row.total_shares as u32,
                    SharePrice::new(row.purchase_price as f64)
                        .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                )?;
                Ok(Some(ownership))
            }
            None => Ok(None),
        }
    }

    async fn get_by_user(&self, user_id: Uuid) -> Result<Vec<ShareOwnership>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let rows = sqlx::query!(
            "SELECT so.user_id, so.fractional_song_id, so.shares_owned, so.purchase_price, 
             so.total_earnings, so.purchase_date, fs.total_shares
             FROM share_ownerships so
             JOIN fractional_songs fs ON so.fractional_song_id = fs.id
             WHERE so.user_id = $1",
            user_id
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo ownerships por user: {}", e)))?;

        let mut ownerships = Vec::new();
        for row in rows {
            let ownership = ShareOwnership::new(
                row.user_id,
                row.fractional_song_id,
                row.shares_owned as u32,
                row.total_shares as u32,
                SharePrice::new(row.purchase_price as f64)
                    .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
            )?;
            ownerships.push(ownership);
        }

        Ok(ownerships)
    }

    async fn get_by_song(&self, song_id: Uuid) -> Result<Vec<ShareOwnership>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let rows = sqlx::query!(
            "SELECT so.user_id, so.fractional_song_id, so.shares_owned, so.purchase_price, 
             so.total_earnings, so.purchase_date, fs.total_shares
             FROM share_ownerships so
             JOIN fractional_songs fs ON so.fractional_song_id = fs.id
             WHERE so.fractional_song_id = $1",
            song_id
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo ownerships por song: {}", e)))?;

        let mut ownerships = Vec::new();
        for row in rows {
            let ownership = ShareOwnership::new(
                row.user_id,
                row.fractional_song_id,
                row.shares_owned as u32,
                row.total_shares as u32,
                SharePrice::new(row.purchase_price as f64)
                    .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
            )?;
            ownerships.push(ownership);
        }

        Ok(ownerships)
    }

    async fn save(&self, ownership: &ShareOwnership) -> Result<(), FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        sqlx::query!(
            "INSERT INTO share_ownerships 
             (id, user_id, fractional_song_id, shares_owned, purchase_price, total_earnings, purchase_date, last_earning_date)
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
             ON CONFLICT (id) DO UPDATE SET
             shares_owned = $4, total_earnings = $6, last_earning_date = $8",
            ownership.id(),
            ownership.user_id(),
            ownership.fractional_song_id(),
            ownership.shares_owned() as i32,
            ownership.purchase_price().value(),
            ownership.total_earnings().value(),
            ownership.purchase_date(),
            ownership.last_earning_date()
        )
        .execute(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error guardando ownership: {}", e)))?;

        Ok(())
    }

    async fn delete(&self, id: Uuid) -> Result<(), FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        sqlx::query!("DELETE FROM share_ownerships WHERE id = $1", id)
            .execute(pool)
            .await
            .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error eliminando ownership: {}", e)))?;

        Ok(())
    }
}

/// Implementaci贸n PostgreSQL para ShareTransactionRepository
pub struct PostgresShareTransactionRepository {
    db_connection: DatabaseConnection,
}

impl PostgresShareTransactionRepository {
    pub fn new(db_connection: DatabaseConnection) -> Self {
        Self { db_connection }
    }
}

#[async_trait]
impl ShareTransactionRepository for PostgresShareTransactionRepository {
    async fn get_by_id(&self, id: Uuid) -> Result<Option<ShareTransaction>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let row = sqlx::query!(
            "SELECT id, buyer_id, seller_id, fractional_song_id, shares_quantity, 
             price_per_share, total_amount, transaction_type, status, created_at, completed_at
             FROM share_transactions WHERE id = $1",
            id
        )
        .fetch_optional(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo transaction: {}", e)))?;

        match row {
            Some(row) => {
                let transaction = match row.transaction_type.as_str() {
                    "purchase" => ShareTransaction::new_purchase(
                        row.buyer_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Purchase transaction must have buyer_id".to_string()))?,
                        row.fractional_song_id,
                        row.shares_quantity as u32,
                        SharePrice::new(row.price_per_share as f64)
                            .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                    )?,
                    "transfer" => ShareTransaction::new_transfer(
                        row.buyer_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Transfer transaction must have buyer_id".to_string()))?,
                        row.seller_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Transfer transaction must have seller_id".to_string()))?,
                        row.fractional_song_id,
                        row.shares_quantity as u32,
                        SharePrice::new(row.price_per_share as f64)
                            .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                    )?,
                    _ => return Err(FractionalOwnershipError::BusinessRuleViolation("Invalid transaction type".to_string())),
                };
                Ok(Some(transaction))
            }
            None => Ok(None),
        }
    }

    async fn save(&self, transaction: &ShareTransaction) -> Result<(), FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let transaction_type_str = match transaction.transaction_type() {
            TransactionType::Purchase => "purchase",
            TransactionType::Transfer => "transfer",
        };

        sqlx::query!(
            "INSERT INTO share_transactions 
             (id, buyer_id, seller_id, fractional_song_id, shares_quantity, 
              price_per_share, total_amount, transaction_type, status, created_at, completed_at)
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
             ON CONFLICT (id) DO UPDATE SET
             status = $9, completed_at = $11",
            transaction.id(),
            transaction.buyer_id(),
            transaction.seller_id(),
            transaction.fractional_song_id(),
            transaction.shares_quantity() as i32,
            transaction.price_per_share().value(),
            transaction.total_amount().value(),
            transaction_type_str,
            format!("{:?}", transaction.status()).to_lowercase(),
            transaction.created_at(),
            transaction.completed_at()
        )
        .execute(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error guardando transaction: {}", e)))?;

        Ok(())
    }

    async fn get_pending_by_user(&self, user_id: Uuid) -> Result<Vec<ShareTransaction>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let rows = sqlx::query!(
            "SELECT id, buyer_id, seller_id, fractional_song_id, shares_quantity, 
             price_per_share, total_amount, transaction_type, status, created_at, completed_at
             FROM share_transactions 
             WHERE (buyer_id = $1 OR seller_id = $1) AND status = 'pending'",
            user_id
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo pending transactions: {}", e)))?;

        let mut transactions = Vec::new();
        for row in rows {
            let transaction = match row.transaction_type.as_str() {
                "purchase" => ShareTransaction::new_purchase(
                    row.buyer_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Purchase transaction must have buyer_id".to_string()))?,
                    row.fractional_song_id,
                    row.shares_quantity as u32,
                    SharePrice::new(row.price_per_share as f64)
                        .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                )?,
                "transfer" => ShareTransaction::new_transfer(
                    row.buyer_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Transfer transaction must have buyer_id".to_string()))?,
                    row.seller_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Transfer transaction must have seller_id".to_string()))?,
                    row.fractional_song_id,
                    row.shares_quantity as u32,
                    SharePrice::new(row.price_per_share as f64)
                        .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                )?,
                _ => return Err(FractionalOwnershipError::BusinessRuleViolation("Invalid transaction type".to_string())),
            };
            transactions.push(transaction);
        }

        Ok(transactions)
    }

    async fn get_by_song(&self, song_id: Uuid) -> Result<Vec<ShareTransaction>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        
        let rows = sqlx::query!(
            "SELECT id, buyer_id, seller_id, fractional_song_id, shares_quantity, 
             price_per_share, total_amount, transaction_type, status, created_at, completed_at
             FROM share_transactions WHERE fractional_song_id = $1",
            song_id
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo transactions por song: {}", e)))?;

        let mut transactions = Vec::new();
        for row in rows {
            let transaction = match row.transaction_type.as_str() {
                "purchase" => ShareTransaction::new_purchase(
                    row.buyer_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Purchase transaction must have buyer_id".to_string()))?,
                    row.fractional_song_id,
                    row.shares_quantity as u32,
                    SharePrice::new(row.price_per_share as f64)
                        .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                )?,
                "transfer" => ShareTransaction::new_transfer(
                    row.buyer_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Transfer transaction must have buyer_id".to_string()))?,
                    row.seller_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Transfer transaction must have seller_id".to_string()))?,
                    row.fractional_song_id,
                    row.shares_quantity as u32,
                    SharePrice::new(row.price_per_share as f64)
                        .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                )?,
                _ => return Err(FractionalOwnershipError::BusinessRuleViolation("Invalid transaction type".to_string())),
            };
            transactions.push(transaction);
        }

        Ok(transactions)
    }

    async fn get_transactions_history(&self, user_id: Uuid, page: u32, size: u32) -> Result<Vec<ShareTransaction>, FractionalOwnershipError> {
        let pool = self.db_connection.pool();
        let offset = (page.saturating_sub(1)) * size;
        
        let rows = sqlx::query!(
            "SELECT id, buyer_id, seller_id, fractional_song_id, shares_quantity, 
             price_per_share, total_amount, transaction_type, status, created_at, completed_at
             FROM share_transactions 
             WHERE buyer_id = $1 OR seller_id = $1
             ORDER BY created_at DESC LIMIT $2 OFFSET $3",
            user_id, size as i64, offset as i64
        )
        .fetch_all(pool)
        .await
        .map_err(|e| FractionalOwnershipError::InfrastructureError(format!("Error obteniendo transaction history: {}", e)))?;

        let mut transactions = Vec::new();
        for row in rows {
            let transaction = match row.transaction_type.as_str() {
                "purchase" => ShareTransaction::new_purchase(
                    row.buyer_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Purchase transaction must have buyer_id".to_string()))?,
                    row.fractional_song_id,
                    row.shares_quantity as u32,
                    SharePrice::new(row.price_per_share as f64)
                        .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                )?,
                "transfer" => ShareTransaction::new_transfer(
                    row.buyer_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Transfer transaction must have buyer_id".to_string()))?,
                    row.seller_id.ok_or_else(|| FractionalOwnershipError::BusinessRuleViolation("Transfer transaction must have seller_id".to_string()))?,
                    row.fractional_song_id,
                    row.shares_quantity as u32,
                    SharePrice::new(row.price_per_share as f64)
                        .map_err(|e| FractionalOwnershipError::BusinessRuleViolation(format!("Invalid price: {}", e)))?,
                )?,
                _ => return Err(FractionalOwnershipError::BusinessRuleViolation("Invalid transaction type".to_string())),
            };
            transactions.push(transaction);
        }

        Ok(transactions)
    }
} 